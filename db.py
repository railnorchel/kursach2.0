import sqlite3
from datetime import datetime

def create_connection():
    return sqlite3.connect('bot.db')

def setup_db():
    conn = create_connection()
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS user_selections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date TEXT,
            time TEXT,
            workout_program TEXT,
            feedback TEXT,
            completed INTEGER DEFAULT 0
        )
    ''')
    c.execute('''
        CREATE TABLE IF NOT EXISTS bot_texts (
            key TEXT PRIMARY KEY,
            text TEXT
        )
    ''')
    conn.commit()
    conn.close()
    add_column_if_not_exists()

def add_column_if_not_exists():
    conn = create_connection()
    c = conn.cursor()
    try:
        c.execute("ALTER TABLE user_selections ADD COLUMN completed INTEGER DEFAULT 0")
    except sqlite3.OperationalError as e:
        if "duplicate column name" not in str(e):
            raise
    conn.commit()
    conn.close()

def save_user_selection(user_id, date, time, workout_program=None):
    conn = create_connection()
    c = conn.cursor()
    c.execute("""
        INSERT INTO user_selections (user_id, date, time, workout_program, completed)
        VALUES (?, ?, ?, ?, 0)
    """, (user_id, date, time, workout_program))
    conn.commit()
    conn.close()

def update_user_selection(user_id, old_date, old_time, new_date, new_time, workout_program):
    conn = create_connection()
    c = conn.cursor()
    c.execute("""
        UPDATE user_selections
        SET date = ?, time = ?, workout_program = ?
        WHERE user_id = ? AND date = ? AND time = ?
    """, (new_date, new_time, workout_program, user_id, old_date, old_time))
    conn.commit()
    conn.close()

def save_feedback(user_id, date, time, feedback):
    conn = create_connection()
    c = conn.cursor()
    c.execute("""
        UPDATE user_selections
        SET feedback = ?, completed = 1
        WHERE user_id = ? AND date = ? AND time = ?
    """, (feedback, user_id, date, time))
    conn.commit()
    conn.close()

def get_user_progress(user_id, start_date):
    conn = create_connection()
    c = conn.cursor()
    c.execute("SELECT date, time, workout_program, feedback FROM user_selections WHERE user_id = ? AND date >= ? AND completed = 1", (user_id, start_date))
    result = c.fetchall()
    conn.close()
    return result

def get_user_selection(user_id):
    conn = create_connection()
    c = conn.cursor()
    c.execute("SELECT date, time, workout_program, feedback FROM user_selections WHERE user_id = ?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result

def get_todays_workouts():
    today = datetime.now().strftime("%Y-%m-%d")
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, date, time FROM user_selections WHERE date = ?", (today,))
    workouts = [{'user_id': row[0], 'date': row[1], 'time': row[2]} for row in cursor.fetchall()]
    conn.close()
    return workouts

def get_all_workouts():
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT user_id, date, time FROM user_selections")
    workouts = cursor.fetchall()
    conn.close()
    return workouts  # –î–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π

def get_future_workouts(user_id):
    today = datetime.now().strftime("%Y-%m-%d")
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT date, time, workout_program FROM user_selections WHERE user_id = ? AND date >= ? ORDER BY date, time", (user_id, today))
    workouts = cursor.fetchall()
    conn.close()
    return workouts

def delete_workout(user_id, date, time):
    conn = create_connection()
    c = conn.cursor()
    c.execute("""
        DELETE FROM user_selections
        WHERE user_id = ? AND date = ? AND time = ?
    """, (user_id, date, time))
    conn.commit()
    conn.close()

def get_bot_text(key):
    conn = create_connection()
    c = conn.cursor()
    c.execute("SELECT text FROM bot_texts WHERE key = ?", (key,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else ""

def initialize_texts():
    conn = create_connection()
    c = conn.cursor()
    texts = {
        "welcome_message": "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç FitCalendar, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! üèãÔ∏è‚Äç‚ôÇÔ∏è\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
        "rules_message": "–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ üìã:\n\n1Ô∏è‚É£ –°–ª–µ–¥–∏ –∑–∞ —Å–Ω–æ–º:\n   - –£–±–µ–¥–∏—Å—å, —á—Ç–æ —É —Ç–µ–±—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è üõå.\n\n2Ô∏è‚É£ –ü–∏—Ç–∞–π—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ:\n   - –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ üçé.\n\n3Ô∏è‚É£ –ü–µ–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã:\n   - –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è –≤–∞–∂–Ω–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è üíß.\n\n4Ô∏è‚É£ –†–∞–∑–º–∏–Ω–∞–π—Å—è –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π:\n   - –†–∞–∑–º–∏–Ω–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ç—Ä–∞–≤–º –∏ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ü§∏.\n\n5Ô∏è‚É£ –î–µ—Ä–∂–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π:\n   - –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –ø–æ–º–æ–≥—É—Ç –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–µ–π üí™.\n\n–°–ª–µ–¥—É–π —ç—Ç–∏–º –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–∞–≤–∏–ª–∞–º –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!",
        "instructions_message": "–í–æ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç: \n\n1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üìÖüïí.\n\n2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèãÔ∏è‚Äç‚ôÄÔ∏è.\n\n3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üì¨.\n\n4Ô∏è‚É£ –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å üìù.\n\n5Ô∏è‚É£ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\"üìä.\n\n6Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ —É–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ \"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\"‚úèÔ∏èüóëÔ∏è.\n\nüëá –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, —Ç–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π \"–ù–µ –ø–æ–Ω—è–ª, –¥–∞–≤–∞–π –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ\", –∞ –µ—Å–ª–∏ —Ç—ã –≤—Å–µ –ø–æ–Ω—è–ª, —Ç–æ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!",
        "detailed_instructions_message": "–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ üìò:\n\n1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n   - –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n   - –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üìÖ —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è.\n   - –£–∫–∞–∂–∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üïí –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 21:44).\n\n2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n   - –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–ë–µ–≥ 5 –∫–º\" –∏–ª–∏ \"–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1 —á–∞—Å\").\n\n3Ô∏è‚É£ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:\n   - –ü–æ–ª—É—á–∏—à—å –¥–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∑–∞ 2 —á–∞—Å–∞ –∏ –∑–∞ 1 –º–∏–Ω—É—Ç—É –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üîî.\n\n4Ô∏è‚É£ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n   - –ü–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç —Ç–µ–±—è –æ—Ü–µ–Ω–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: \"–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–∏–ª\", \"–í—ã–ø–æ–ª–Ω–∏–ª\" –∏–ª–∏ \"–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏–ª\" üó£Ô∏è.\n   - –í–≤–µ–¥–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –µ—Å–ª–∏ –≤—ã–±–µ—Ä–µ—à—å \"–ù–µ–¥–æ–≤—ã–ø–æ–ª–Ω–∏–ª\" –∏–ª–∏ \"–ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–∏–ª\".\n\n5Ô∏è‚É£ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:\n   - –ù–∞–∂–º–∏ \"–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n  - –í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ (–Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü, –≥–æ–¥) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä.\n\n6Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n   - –ù–∞–∂–º–∏ \"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n   - –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ \"–ò–∑–º–µ–Ω–∏—Ç—å\" –∏–ª–∏ \"–£–¥–∞–ª–∏—Ç—å\" –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ ‚úèÔ∏èüóëÔ∏è.\n\n–ù–∞–∂–º–∏ \"–í–æ—Ç —Ç–µ–ø–µ—Ä—å –º–Ω–µ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ\" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã üëá.",
    }
    for key, text in texts.items():
        c.execute("""
            INSERT OR REPLACE INTO bot_texts (key, text)
            VALUES (?, ?)
        """, (key, text))
    conn.commit()
    conn.close()
